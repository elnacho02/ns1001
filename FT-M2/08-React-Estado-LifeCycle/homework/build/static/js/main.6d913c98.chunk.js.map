{"version":3,"sources":["components/SearchBar.module.css","components/Card.module.css","components/Cards.module.css","components/BackgroundImg.js","components/SearchBar.jsx","components/Card.jsx","components/Loader.jsx","components/CurrentCard.jsx","components/Cards.jsx","media/video.mp4","components/Cover.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","BackgroundImg","props","elem","city","bgImg","img","length","src","alt","SearchBar","onSearch","useState","setCity","className","s","bar_container","onSubmit","e","preventDefault","ciudadIn","type","placeholder","onChange","x","target","value","inputChange","button","Card","main_container","onClick","onClose","name","temp_container","min","max","Loader","id","class","CurrentCard","flag","Cards","cities","Cards_container","map","currentId","Cover","classname","coverVideo","autoPlay","loop","muted","App","setCities","currentCity","setCurrentCity","ciudad","fetch","then","r","json","rec","undefined","main","Math","round","temp_min","temp_max","weather","icon","alert","oldCities","filter","c","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d913c98.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar_container\":\"SearchBar_bar_container__3hCLB\",\"ciudadIn\":\"SearchBar_ciudadIn__1apcn\",\"button\":\"SearchBar_button__13jEk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_container\":\"Card_main_container__2KWtO\",\"temp_container\":\"Card_temp_container__LP2o0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cards_container\":\"Cards_Cards_container__2GZdP\"};","import React from 'react'\r\n\r\n\r\nfunction BackgroundImg(props) {\r\n    var elem = props.city\r\n    var bgImg = \"\";\r\n    /* soleado */\r\n    if(elem.img===\"02d\" || elem.img===\"\"){\r\n        bgImg = \"https://p4.wallpaperbetter.com/wallpaper/183/387/618/sunny-day-summer-hd-wallpaper-wallpaper-preview.jpg\";\r\n    }\r\n    /* lluvioso */\r\n    else if(elem.img===\"05d\"||elem.img===\"50d\" || elem.img===\"10d\" || elem.img===\"10n\"){\r\n        bgImg = \"https://images.pexels.com/photos/1028600/pexels-photo-1028600.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\"\r\n    }\r\n    /*nublado*/\r\n    else if(elem.img===\"04d\"||elem.img===\"04n\"){\r\n        bgImg = \"https://images.pexels.com/photos/209831/pexels-photo-209831.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\"\r\n    }\r\n    if(bgImg.length){\r\n        return (\r\n        <img src={bgImg} alt=\"\" />\r\n       )}\r\n    else{return(\r\n           <div>\r\n               \r\n           </div>\r\n           \r\n    )}\r\n}\r\n\r\nexport default BackgroundImg\r\n\r\n","import React, { useState } from \"react\";\r\nimport s from \"./SearchBar.module.css\";\r\nexport default function SearchBar({onSearch}) {\r\n  \r\n  const [city, setCity] = useState(\"\");\r\n  const inputChange = (x)=>{\r\n    x.preventDefault();\r\n    setCity(x.target.value)\r\n  }\r\n  return (\r\n    <div className={s.bar_container}>\r\n      <form onSubmit={(e) => {\r\n        e.preventDefault();\r\n        onSearch(city);\r\n      }}>\r\n        <input className={s.ciudadIn}\r\n          type=\"text\"\r\n          placeholder=\"Ciudad...\"\r\n          onChange={(x)=>inputChange(x)}\r\n        />\r\n        <input className={s.button} \r\n        type=\"submit\" value=\"+\" />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport s from'./Card.module.css';\r\n\r\nexport default function Card (props) {\r\n    return (\r\n      <div className={s.main_container}>\r\n      <button  onClick={props.onClose}>X</button>\r\n      <h2>{props.name}</h2>\r\n      <div className={s.temp_container}>\r\n        <div >\r\n          <h5>Min</h5>\r\n          <p>{props.min}</p>\r\n          \r\n        </div>\r\n        <div >\r\n          <h5>Max</h5>\r\n          <p>{props.max}</p>\r\n          \r\n        </div>\r\n        <img src={`http://openweathermap.org/img/wn/${props.img}@2x.png`}/* src=\"http://openweathermap.org/img/wn/02d@2x.png\"  */alt=\"\" />\r\n      </div>\r\n    </div>\r\n    );\r\n};\r\n","import React from 'react'\r\nimport \"./Loader.css\";\r\nfunction Loader() {\r\n    return (\r\n        <div id=\"contenedor\">\r\n            <h4>Busc√° una ciudad</h4>\r\n            <div class=\"loader\" id=\"loader\">Loading...</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react';\r\nimport  { useState } from 'react';\r\nimport Card from \"./Card\";\r\nimport \"./CurrentCard.css\";\r\nimport Loader from './Loader';\r\n\r\nfunction CurrentCard(props) {\r\nconst elem = props.city;\r\nvar flag = props.flag;\r\nif(typeof elem.id === \"number\")flag=true;\r\nif(flag===true){\r\n    return (\r\n        <div className=\"currentCard-container\">\r\n            <Card\r\n              max={elem.max}\r\n              min={elem.min}\r\n              name={elem.name}\r\n              img={elem.img}\r\n              onClose={() => props.onClose()}\r\n              id={elem.id}  \r\n            />\r\n        </div>\r\n    )}\r\nif(flag===false){\r\n    return(\r\n        <div>\r\n            <Loader />\r\n        </div>\r\n    )\r\n}\r\n\r\n}\r\n\r\nexport default CurrentCard\r\n","import React from 'react';\r\nimport s from'./Cards.module.css';\r\nimport Card from './Card.jsx';\r\nimport App from '../App';\r\nimport CurrentCard from './CurrentCard';\r\n\r\nexport default function Cards(props) {\r\n  if(props.cities){\r\n    return (\r\n      <div className={s.Cards_container}>\r\n        {props.cities.map(elem =>{\r\n          if(elem.id === props.currentId)return null;\r\n          return(<Card\r\n            max={elem.max}\r\n            min={elem.min}\r\n            name={elem.name}\r\n            img={elem.img}\r\n            onClose={() => props.onClose(elem.id)}\r\n            id={elem.id}\r\n          />)\r\n        } )}\r\n      </div>\r\n    );\r\n  } else {\r\n    return(\r\n      <div>Sin ciudades</div>\r\n    )\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/video.d6577a0a.mp4\";","import React from 'react';\r\nimport coverVideo from \"../media/video.mp4\";\r\nimport \"./Cover.css\";\r\n\r\nexport default function Cover(props) {\r\n\r\nif(props.cities.length<1){\r\n    return (\r\n        <div className=\"cover-container\">\r\n        <video  classname=\"video\" src={coverVideo} autoPlay loop muted></video>\r\n        </div>\r\n    )}\r\nelse{\r\n        return(\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport BackgroundImg from \"./components/BackgroundImg\";\r\nimport { useState } from 'react';\r\nimport SearchBar from './components/SearchBar';\r\nimport Cards from \"./components/Cards\";\r\nimport Card from './components/Card';\r\nimport CurrentCard from './components/CurrentCard';\r\nimport Cover from './components/Cover';\r\nexport default function App() {\r\n  \r\n  const [cities, setCities] = useState([]);\r\n  const apiK = \"59096b27e252638ce3fa6295e56f2b28\";\r\n  const [currentCity, setCurrentCity] = useState([]);\r\n  \r\n  const onSearch=(ciudad)=>{\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiK}&units=metric`)\r\n    .then(r=> r.json())\r\n    .then((rec)=>{\r\n      if(rec.main !== undefined){\r\n        const ciudad = {\r\n          min: Math.round(rec.main.temp_min),\r\n          max: Math.round(rec.main.temp_max),\r\n          img: rec.weather[0].icon,\r\n          id: rec.id,\r\n          name: rec.name,\r\n        };\r\n        setCurrentCity(ciudad);\r\n        setCities(cities=>[...cities, ciudad])\r\n\r\n        \r\n        \r\n      }else{alert(\"Ciudad no encontrada\");\r\n      }\r\n    })\r\n  }\r\n  const onCloseCurrent = ()=>{\r\n    setCurrentCity([])\r\n  }\r\n  const onClose = (id)=>{\r\n    setCities(oldCities=> oldCities.filter(c=> c.id !== id));\r\n  }\r\n  return (\r\n      <div className=\"App\">\r\n        \r\n        <div className=\"recent-card-container\">\r\n          <header>\r\n            <h2>WEATHER APP</h2>\r\n          </header>\r\n          <div className=\"last-div\">\r\n              <SearchBar onSearch={onSearch}/>\r\n          </div>\r\n          \r\n          <BackgroundImg city={currentCity}/>\r\n          <CurrentCard city={currentCity} flag={false} onClose={onCloseCurrent}/>\r\n          </div>\r\n          <Cover cities={cities}/>  \r\n      <div>\r\n        <Cards cities={cities} onClose={onClose} currentId={currentCity.id}/>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}